theme_bw() +
labs(x="", y="", title = "Número de programas do PPAG 2020-2023 por órgão") +
theme(axis.text.x = element_blank())
ggplotly(p)
lista_programas %>% group_by(Órgão.Responsável.pelo.Programa) %>%
summarise(n = n()) %>%
arrange(-n) %>%
rename("Órgão" = Órgão.Responsável.pelo.Programa) %>% View()
lista_programas %>% group_by(Órgão.Responsável.pelo.Programa) %>%
summarise(n = n()) %>%
arrange(-n) %>%
rename("Órgão" = Órgão.Responsável.pelo.Programa) %>%
ggplot(aes(x = reorder(Órgão.Responsável.pelo.Programa, n), y = n)) +
geom_col(fill = "red") +
coord_flip() +
theme_bw() +
labs(x="", y="", title = "Número de programas do PPAG 2020-2023 por órgão") +
theme(axis.text.x = element_blank())
lista_programas %>% group_by(Órgão.Responsável.pelo.Programa) %>%
summarise(n = n()) %>%
arrange(-n) %>%
rename("Órgão" = Órgão.Responsável.pelo.Programa) %>%
ggplot(aes(x = reorder(Órgão, n), y = n)) +
geom_col(fill = "red") +
coord_flip() +
theme_bw() +
labs(x="", y="", title = "Número de programas do PPAG 2020-2023 por órgão") +
theme(axis.text.x = element_blank())
p <- lista_programas %>% group_by(Órgão.Responsável.pelo.Programa) %>%
summarise(n = n()) %>%
arrange(-n) %>%
rename("Órgão" = Órgão.Responsável.pelo.Programa) %>%
ggplot(aes(x = reorder(Órgão, n), y = n)) +
geom_col(fill = "red") +
coord_flip() +
theme_bw() +
labs(x="", y="", title = "Número de programas do PPAG 2020-2023 por órgão") +
theme(axis.text.x = element_blank())
ggplotly(p)
p <- lista_programas %>% group_by(Órgão.Responsável.pelo.Programa) %>%
summarise(n = n()) %>%
arrange(-n) %>%
rename("Órgão" = Órgão.Responsável.pelo.Programa) %>%
ggplot(aes(x = Órgão, y = n)) +
geom_col(fill = "red") +
coord_flip() +
theme_bw() +
labs(x="", y="", title = "Número de programas do PPAG 2020-2023 por órgão") +
theme(axis.text.x = element_blank())
ggplotly(p)
p <- lista_programas %>% group_by(Órgão.Responsável.pelo.Programa) %>%
summarise(n = n()) %>%
select("Órgão" = Órgão.Responsável.pelo.Programa, "Número de programas" = n) %>%
arrange(-`Número de programas`) %>%
ggplot(aes(x = Órgão, y = n)) +
geom_col(fill = "red") +
coord_flip() +
theme_bw() +
labs(x="", y="", title = "Número de programas do PPAG 2020-2023 por órgão") +
theme(axis.text.x = element_blank())
ggplotly(p)
p <- lista_programas %>% group_by(Órgão.Responsável.pelo.Programa) %>%
summarise(n = n()) %>%
select("Órgão" = Órgão.Responsável.pelo.Programa, "Número de programas" = n) %>%
reorder(`Número de programas`) %>%
ggplot(aes(x = Órgão, y = n)) +
geom_col(fill = "red") +
coord_flip() +
theme_bw() +
labs(x="", y="", title = "Número de programas do PPAG 2020-2023 por órgão") +
theme(axis.text.x = element_blank())
p <- lista_programas %>% group_by(Órgão.Responsável.pelo.Programa) %>%
summarise(n = n()) %>%
select("Órgão" = Órgão.Responsável.pelo.Programa, "Número de programas" = n) %>%
arrange(`Número de programas`, desc) %>%
ggplot(aes(x = Órgão, y = n)) +
geom_col(fill = "red") +
coord_flip() +
theme_bw() +
labs(x="", y="", title = "Número de programas do PPAG 2020-2023 por órgão") +
theme(axis.text.x = element_blank())
p <- lista_programas %>% group_by(Órgão.Responsável.pelo.Programa) %>%
summarise(n = n()) %>%
select("Órgão" = Órgão.Responsável.pelo.Programa, "Número de programas" = n) %>%
arrange(Órgão, `Número de programas`, desc) %>%
ggplot(aes(x = Órgão, y = n)) +
geom_col(fill = "red") +
coord_flip() +
theme_bw() +
labs(x="", y="", title = "Número de programas do PPAG 2020-2023 por órgão") +
theme(axis.text.x = element_blank())
p <- lista_programas %>% group_by(Órgão.Responsável.pelo.Programa) %>%
summarise(n = n()) %>%
select("Órgão" = Órgão.Responsável.pelo.Programa, "Número de programas" = n) %>%
arrange(`Número de programas`) %>%
ggplot(aes(x = Órgão, y = n)) +
geom_col(fill = "red") +
coord_flip() +
theme_bw() +
labs(x="", y="", title = "Número de programas do PPAG 2020-2023 por órgão") +
theme(axis.text.x = element_blank())
ggplotly(p)
p <- lista_programas %>% group_by(Órgão.Responsável.pelo.Programa) %>%
summarise(n = n()) %>%
select("Órgão" = Órgão.Responsável.pelo.Programa, "Número de programas" = n) %>%
arrange(`Número de programas`) %>%
ggplot(aes(x = Órgão, y = `Número de programas`)) +
geom_col(fill = "red") +
coord_flip() +
theme_bw() +
labs(x="", y="", title = "Número de programas do PPAG 2020-2023 por órgão") +
theme(axis.text.x = element_blank())
ggplotly(p)
p <- lista_programas %>% group_by(Órgão.Responsável.pelo.Programa) %>%
summarise(n = n()) %>%
select("Órgão" = Órgão.Responsável.pelo.Programa, "Número de programas" = n) %>%
arrange(`Número de programas, desc`) %>%
ggplot(aes(x = Órgão, y = `Número de programas`)) +
geom_col(fill = "red") +
coord_flip() +
theme_bw() +
labs(x="", y="", title = "Número de programas do PPAG 2020-2023 por órgão") +
theme(axis.text.x = element_blank())
p <- lista_programas %>% group_by(Órgão.Responsável.pelo.Programa) %>%
summarise(n = n()) %>%
select("Órgão" = Órgão.Responsável.pelo.Programa, "Número de programas" = n) %>%
arrange(`Número de programas`) %>% View()
p <- lista_programas %>% group_by(Órgão.Responsável.pelo.Programa) %>%
summarise(n = n()) %>%
select("Órgão" = Órgão.Responsável.pelo.Programa, "Número de programas" = n) %>%
arrange(`Número de programas`, desc) %>%
ggplot(aes(x = Órgão, y = `Número de programas`)) +
geom_col(fill = "red") +
coord_flip() +
theme_bw() +
labs(x="", y="", title = "Número de programas do PPAG 2020-2023 por órgão") +
theme(axis.text.x = element_blank())
p <- lista_programas %>% group_by(Órgão.Responsável.pelo.Programa) %>%
summarise(n = n()) %>%
select("Órgão" = Órgão.Responsável.pelo.Programa, "Número de programas" = n) %>%
arrange(`Número de programas`, descending_order = TRUE) %>%
ggplot(aes(x = Órgão, y = `Número de programas`)) +
geom_col(fill = "red") +
coord_flip() +
theme_bw() +
labs(x="", y="", title = "Número de programas do PPAG 2020-2023 por órgão") +
theme(axis.text.x = element_blank())
ggplotly(p)
p <- lista_programas %>% group_by(Órgão.Responsável.pelo.Programa) %>%
summarise(n = n()) %>%
select("Órgão" = Órgão.Responsável.pelo.Programa, "Número de programas" = n) %>%
ggplot(aes(x = reorder(Órgão, `Número de programas`), y = `Número de programas`)) +
geom_col(fill = "red") +
coord_flip() +
theme_bw() +
labs(x="", y="", title = "Número de programas do PPAG 2020-2023 por órgão") +
theme(axis.text.x = element_blank())
ggplotly(p)
lista_programas %>% group_by(Órgão.Responsável.pelo.Programa) %>%
summarise(n = n()) %>%
select("Órgão" = Órgão.Responsável.pelo.Programa, "Número de programas" = n) %>%
ggplot(aes(x = reorder(Órgão, `Número de programas`), y = `Número de programas`)) +
geom_col(fill = "red") +
geom_label(aes(label = `Número de programas`)) +
coord_flip() +
theme_bw() +
labs(x="", y="", title = "Número de programas do PPAG 2020-2023 por órgão") +
theme(axis.text.x = element_blank())
p <- lista_programas %>% group_by(Órgão.Responsável.pelo.Programa) %>%
summarise(n = n()) %>%
select("Órgão" = Órgão.Responsável.pelo.Programa, "Número de programas" = n) %>%
ggplot(aes(x = reorder(Órgão, `Número de programas`), y = `Número de programas`)) +
geom_col(fill = "red") +
geom_label(aes(label = `Número de programas`), fill = "#ff8080") +
coord_flip() +
theme_bw() +
labs(x="", y="", title = "Número de programas do PPAG 2020-2023 por órgão") +
theme(axis.text.x = element_blank())
lista_programas %>% group_by(Órgão.Responsável.pelo.Programa) %>%
summarise(n = n()) %>%
select("Órgão" = Órgão.Responsável.pelo.Programa, "Número de programas" = n) %>%
ggplot(aes(x = reorder(Órgão, `Número de programas`), y = `Número de programas`)) +
geom_col(fill = "red") +
geom_label(aes(label = `Número de programas`), fill = "#ff8080") +
coord_flip() +
theme_bw() +
labs(x="", y="", title = "Número de programas do PPAG 2020-2023 por órgão") +
theme(axis.text.x = element_blank())
lista_programas <- programas %>% select(Nome.do.Programa, Justificativa, Estratégia.de.Implementação, Órgão.Responsável.pelo.Programa, Área.Temática) %>%
filter(!duplicated(Nome.do.Programa))
lista_programas %>% group_by(Área.Temática) %>%
summarise(n = n()) %>%
select("Área" = Área.Temática, "Número de programas" = n) %>%
ggplot(aes(x = reorder(Área, `Número de programas`), y = `Número de programas`)) +
geom_col(fill = "red") +
geom_label(aes(label = `Número de programas`), fill = "#ff8080") +
coord_flip() +
theme_bw() +
labs(x="", y="", title = "Número de programas do PPAG 2020-2023 por área temática") +
theme(axis.text.x = element_blank())
runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp('app_painel')
runApp('app_painel')
runApp('app_painel')
gc()
# Descrição programas -----------------------------------------------------
programas <- openxlsx::read.xlsx("../dados/programas_planejamento.xlsx")
# Descrição programas -----------------------------------------------------
programas <- openxlsx::read.xlsx("../dados/programas_planejamento.xlsx")
# Descrição programas -----------------------------------------------------
programas <- openxlsx::read.xlsx("dados/programas_planejamento.xlsx")
programas %>% group_by(Nome.do.Programa, Justificativa, Estratégia.de.Implementação, Órgão.Responsável.pelo.Programa) %>%
summarise(n = n()) %>% View()
library(readxl)
library(tidyverse)
library(plotly)
programas %>% group_by(Nome.do.Programa, Justificativa, Estratégia.de.Implementação, Órgão.Responsável.pelo.Programa) %>%
summarise(n = n()) %>% View()
## Tirando linhas duplicadas
lista_programas <- programas %>% select(Nome.do.Programa, Justificativa, Estratégia.de.Implementação, Órgão.Responsável.pelo.Programa, Área.Temática) %>%
filter(!duplicated(Nome.do.Programa))
shiny::runApp('app_painel')
runApp('app_painel')
runApp('app_painel')
lista_programas %>% group_by(Área.Temática) %>%
summarise(n = n()) %>%
select("Área" = Área.Temática, "Número de programas" = n) %>%
ggplot(aes(x = reorder(Área, `Número de programas`), y = `Número de programas`)) +
geom_col(fill = "red") +
geom_label(aes(label = `Número de programas`), fill = "#ff8080") +
coord_flip() +
theme_bw() +
labs(x="", y="", title = "Número de programas do PPAG 2020-2023 por área temática") +
theme(axis.text.x = element_blank())
runApp('app_painel')
runApp('app_painel')
runApp('app_painel')
runApp('app_painel')
runApp('app_painel')
runApp('app_painel')
library(dt)
library(dt)
library(DT)
install.packages("DT")
library(DT)
runApp('app_painel')
runApp('app_painel')
runApp('app_painel')
runApp('app_painel')
runApp('app_painel')
runApp('app_painel')
View(lista_programas)
lista_programas %>% pull(Órgão.Responsável.pelo.Programa) %>% unique()
orgaos <- lista_programas %>% pull(Órgão.Responsável.pelo.Programa) %>% unique() %>% order()
orgaos <- lista_programas %>% pull(Órgão.Responsável.pelo.Programa) %>% unique() %>% arrange()
orgaos <- lista_programas %>% pull(Órgão.Responsável.pelo.Programa) %>% unique() %>% sort()
lista_selecao_orgaos <- c("TODOS") %>% append(orgaos)
runApp('app_painel')
orgaos <- programas %>% pull(Unidade.Administrativa.Responsável.pelo.Programa) %>% unique() %>% sort() %>% append("TODOS")
orgaos
orgaos <- programas %>% pull(Unidade.Administrativa.Responsável.pelo.Programa) %>% unique() %>% sort() %>% append("TODOS") %>% select(2:)
orgaos %>% orgaos[2:142]
orgaos <- orgaos[2:142]
orgaos <- programas %>% pull(Unidade.Administrativa.Responsável.pelo.Programa) %>% unique() %>% sort() %>% append("TODOS")
orgaos <- orgaos[2:142]
lista_selecao_orgaos <- c("TODOS") %>% append(orgaos)
runApp('app_painel')
orgaos <- programas %>% pull(Unidade.Administrativa.Responsável.pelo.Programa) %>% unique() %>% sort() %>% append("TODOS")
orgaos <- orgaos[3:142]
lista_selecao_orgaos <- c("TODOS") %>% append(orgaos)
runApp('app_painel')
runApp('app_painel')
orgaos <- programas %>% pull(Unidade.Administrativa.Responsável.pelo.Programa) %>% unique() %>% sort()
orgaos <- orgaos[3:141]
lista_selecao_orgaos <- c("TODOS") %>% append(orgaos)
lista_selecao_orgaos
View(programas)
areas <- programas %>% pull(Área.Temática) %>% unique() %>% sort()
lista_selecao_areas <- c("TODAS") %>% append(areas)
areas
lista_selecao_areas
View(programas)
View(lista_programas)
lista_programas <- programas %>% select(Nome.do.Programa, Justificativa, Estratégia.de.Implementação, Unidade.Administrativa.Responsável.pelo.Programa, Área.Temática) %>%
filter(!duplicated(Nome.do.Programa))
View(lista_programas)
lista_programas <- programas %>% select(Nome.do.Programa, Justificativa, Estratégia.de.Implementação, Unidade.Orçamentária.Responsável.pelo.Programa, Área.Temática) %>%
filter(!duplicated(Nome.do.Programa))
View(lista_programas)
lista_programas
lista_programas %>% names9)
lista_programas %>% names()
runApp('app_painel')
View(lista_programas)
runApp('app_painel')
runApp('app_painel')
runApp('app_painel')
runApp('app_painel')
runApp('app_painel')
runApp('app_painel')
runApp('app_painel')
runApp('app_painel')
runApp('app_painel')
runApp('app_painel')
runApp('app_painel')
runApp('app_painel')
runApp('app_painel')
runApp('app_painel')
lista_selecao_orgaos
# Lista órgãos
orgaos <- programas %>% pull(Unidade.Orçamentária.Responsável.pelo.Programa) %>% unique() %>% sort()
orgaos <- orgaos[3:141]
lista_selecao_orgaos <- c("TODOS") %>% append(orgaos)
orgaos
orgaos <- programas %>% pull(Unidade.Orçamentária.Responsável.pelo.Programa) %>% unique() %>% sort()
# orgaos <- orgaos[3:141]
lista_selecao_orgaos <- c("TODOS") %>% append(orgaos)
orgaos
lista_selecao_orgaos
runApp('app_painel')
runApp('app_painel')
lista_programas
lista_programas %>% names()
runApp('app_painel')
runApp('app_painel')
shiny::runApp('app_painel')
runApp('app_painel')
runApp('app_painel')
runApp('app_painel')
#
# This is the server logic of a Shiny web application. You can run the
# application by clicking 'Run App' above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(shiny)
library(plotly)
library(DT)
# Define server logic required to draw a histogram
# DADOS -------------------------------------------------------------------
programas <- openxlsx::read.xlsx("../dados/programas_planejamento.xlsx")
runApp('app_painel')
#
library(shiny)
library(plotly)
library(DT)
# Define server logic required to draw a histogram
# DADOS -------------------------------------------------------------------
programas <- openxlsx::read.xlsx("dados/programas_planejamento.xlsx")
lista_programas <- programas %>% select(Nome.do.Programa, Justificativa, Estratégia.de.Implementação, Unidade.Orçamentária.Responsável.pelo.Programa, Área.Temática) %>%
filter(!duplicated(Nome.do.Programa))
runApp('app_painel')
orgaos <- programas %>% pull(Unidade.Orçamentária.Responsável.pelo.Programa) %>% unique() %>% sort()
# orgaos <- orgaos[3:141]
lista_selecao_orgaos <- c("TODOS") %>% append(orgaos)
## Lista area tematica
areas <- programas %>% pull(Área.Temática) %>% unique() %>% sort()
lista_selecao_areas <- c("TODAS") %>% append(areas)
runApp('app_painel')
runApp('app_painel')
lista_programas %>% filter(Unidade.Orçamentária.Responsável.pelo.Programa == input$orgao_programa %>%
pull(Área.Temática)) %>% unique()
View(lista_programas)
runApp('app_painel')
lista_programas %>% names()
runApp('app_painel')
runApp('app_painel')
shiny::runApp('app_painel')
getwd()
runApp('app_painel')
GETWD()
getwd()
programas <- openxlsx::read.xlsx("dados/programas_planejamento.xlsx")
## Lista órgãos
orgaos <- programas %>% pull(Unidade.Orçamentária.Responsável.pelo.Programa) %>% unique() %>% sort()
# orgaos <- orgaos[3:141]
lista_selecao_orgaos <- c("TODOS") %>% append(orgaos)
runApp('app_painel')
shiny::runApp('app_painel')
runApp('app_painel')
programas <- openxlsx::read.xlsx("dados/programas_planejamento.xlsx")
lista_programas <- programas %>% select(Nome.do.Programa, Justificativa, Estratégia.de.Implementação, Unidade.Orçamentária.Responsável.pelo.Programa, Área.Temática) %>%
filter(!duplicated(Nome.do.Programa))
dados_orgao_programa <- lista_programas %>% group_by(Unidade.Orçamentária.Responsável.pelo.Programa) %>%
summarise(n = n()) %>%
select("Órgão" = Unidade.Orçamentária.Responsável.pelo.Programa, "Número de programas" = n) %>%
arrange(-`Número de programas`) %>%
datatable(rownames = FALSE)
dados_area_programa  <- lista_programas %>% group_by(Área.Temática) %>%
summarise(n = n()) %>%
select("Área" = Área.Temática, "Número de programas" = n)
## Lista órgãos
orgaos <- programas %>% pull(Unidade.Orçamentária.Responsável.pelo.Programa) %>% unique() %>% sort()
# orgaos <- orgaos[3:141]
lista_selecao_orgaos <- c("TODOS") %>% append(orgaos)
## Lista area tematica
areas <- programas %>% pull(Área.Temática) %>% unique() %>% sort()
lista_selecao_areas <- c("TODAS") %>% append(areas)
lista_selecao_orgaos
runApp('app_painel')
shiny::runApp('app_painel')
runApp('app_painel')
source("C:/Users/Pedro Diniz/Repositório/projetos-ciencia-dados/projetos-ciencia-dados/painel_orcamentario/app_painel/lendo_loa2022.R")
runApp('app_painel')
shiny::runApp()
runApp()
shinyApp(ui, server)
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
# Dados -------------------------------------------------------------------
programas <- read.xlsx("dados/programas_planejamento.xlsx")
lista_programas <- programas %>% select(Nome.do.Programa, Justificativa, Estratégia.de.Implementação, Unidade.Orçamentária.Responsável.pelo.Programa, Área.Temática) %>%
filter(!duplicated(Nome.do.Programa))
dados_orgao_programa <- lista_programas %>% group_by(Unidade.Orçamentária.Responsável.pelo.Programa) %>%
summarise(n = n()) %>%
select("Órgão" = Unidade.Orçamentária.Responsável.pelo.Programa, "Número de programas" = n) %>%
arrange(-`Número de programas`) %>%
datatable(rownames = FALSE)
dados_area_programa  <- lista_programas %>% group_by(Área.Temática) %>%
summarise(n = n()) %>%
select("Área" = Área.Temática, "Número de programas" = n)
## Lista órgãos
orgaos <- programas %>% pull(Unidade.Orçamentária.Responsável.pelo.Programa) %>% unique() %>% sort()
# orgaos <- orgaos[3:141]
lista_selecao_orgaos <- c("TODOS") %>% append(orgaos)
## Lista area tematica
areas <- programas %>% pull(Área.Temática) %>% unique() %>% sort()
lista_selecao_areas <- c("TODAS") %>% append(areas)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp('app_painel')
install.packages("shinydashboards")
runApp('app_painel')
shiny::runApp('app_painel')
install.packages("shinydashboard")
runApp('app_painel')
runApp('app_painel')
runApp('app_painel')
getwd()
source("app_painel/lendo_loa2022.R")
runApp('app_painel')
source("suporte_dados.R")
source("C:/Users/m753140/Repositório Projetos/projetos-ciencia-dados/painel_orcamentario/suporte_dados.R", encoding = 'UTF-8', echo=TRUE)
runApp('app_painel')
runApp('app_painel')
runApp('app_painel')
shiny::runApp('app_painel')
runApp('app_painel')
runApp('app_painel')
runApp('app_painel')
runApp('app_painel')
runApp('app_painel')
runApp('app_painel')
runApp('app_painel')
runApp('app_painel')
runApp('app_painel')
runApp('app_painel')
runApp('app_painel')
runApp('app_painel')
runApp('app_painel')
runApp('app_painel')
runApp('app_painel')
runApp('app_painel')
runApp('app_painel')
runApp('app_painel')
runApp('app_painel')
runApp('app_painel')
runApp('app_painel')
runApp('app_painel')
runApp('app_painel')
runApp('app_painel')
runApp('app_painel')
runApp('app_painel')
runApp('app_painel')
runApp('app_painel')
runApp('app_painel')
runApp('app_painel')
runApp('app_painel')
runApp('app_painel')
runApp('app_painel')
runApp('app_painel')
runApp('app_painel')
runApp('app_painel')
